import meep as mp
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # for 3D plotting
import matplotlib
from matplotlib import colors

# -------------------------------
# Helper: Compute Box Mask on a Grid
# -------------------------------
def get_box_mask(center, size, Xc, Yc, Zc, min_thickness=0.05):
    """
    Given a box defined by center and size (with min_thickness substitution),
    returns a boolean mask (same shape as Xc, Yc, Zc) that is True inside the box.
    """
    tx = size.x if size.x != 0 else min_thickness
    ty = size.y if size.y != 0 else min_thickness
    tz = size.z if size.z != 0 else min_thickness
    center_arr = np.array([center.x, center.y, center.z])
    lower = center_arr - np.array([tx, ty, tz]) / 2
    upper = center_arr + np.array([tx, ty, tz]) / 2
    mask = ((Xc >= lower[0]) & (Xc <= upper[0]) &
            (Yc >= lower[1]) & (Yc <= upper[1]) &
            (Zc >= lower[2]) & (Zc <= upper[2]))
    return mask

# -------------------------------
# Composite Plotting Function
# -------------------------------

def plot3D_composite(sim, cell_size, mesh_midpoint=mp.Vector3(), save_to_image=False,
                     image_name="sim.png", frequency=None, threshold=1e-3):
    """
    Visualizes the 3D simulation cell by creating a composite voxel plot.
    The composite voxel array includes:
      - EPS data (from sim.get_epsilon_grid) wherever it differs from background
      - Source regions (colored red)
      - Monitor/detector regions (colored blue)
    All data are mapped onto the same 3D grid.
    """
    # Compute cell bounds (assuming cell is centered at (0,0,0))
    cell_x_min = -cell_size.x / 2
    cell_x_max =  cell_size.x / 2
    cell_y_min = -cell_size.y / 2
    cell_y_max =  cell_size.y / 2
    cell_z_min = -cell_size.z / 2
    cell_z_max =  cell_size.z / 2

    # Create grid points.
    grid_res = sim.resolution
    Nx = int((cell_x_max - cell_x_min) * grid_res) + 1
    Ny = int((cell_y_max - cell_y_min) * grid_res) + 1
    Nz = int((cell_z_max - cell_z_min) * grid_res) + 1
    xgrid = np.linspace(cell_x_min, cell_x_max, Nx)
    ygrid = np.linspace(cell_y_min, cell_y_max, Ny)
    zgrid = np.linspace(cell_z_min, cell_z_max, Nz)
    
    # Compute EPS data on the full grid.
    eps_data = np.real(sim.get_epsilon_grid(xgrid, ygrid, zgrid, frequency))
    try:
        default_eps = np.round(np.abs(sim.default_material.epsilon_diag[0]), 2)
    except Exception:
        default_eps = 1.0

    # We will plot voxels corresponding to the "cells" between grid points.
    # Compute voxel centers as midpoints.
    xcenters = (xgrid[:-1] + xgrid[1:]) / 2
    ycenters = (ygrid[:-1] + ygrid[1:]) / 2
    zcenters = (zgrid[:-1] + zgrid[1:]) / 2
    Xc, Yc, Zc = np.meshgrid(xcenters, ycenters, zcenters, indexing='ij')
    
    # Trim the EPS data to match the voxel cells.
    eps_trim = eps_data[:-1, :-1, :-1]
    # Create a mask for EPS voxels (where epsilon deviates from background).
    eps_mask = np.abs(eps_trim - default_eps) > threshold
    
    # Prepare composite mask and facecolors array.
    composite_mask = np.copy(eps_mask)
    norm = colors.Normalize(vmin=np.min(eps_data), vmax=np.max(eps_data))
    colormap = matplotlib.colormaps["viridis"]
    composite_facecolors = colormap(norm(eps_data))[:-1, :-1, :-1].copy()
    
    # Initialize source and monitor masks.
    source_mask = np.zeros_like(composite_mask, dtype=bool)
    monitor_mask = np.zeros_like(composite_mask, dtype=bool)
    
    # Translation: add sim.geometry_center and mesh_midpoint.
    translation = mp.Vector3(
        sim.geometry_center.x + mesh_midpoint.x,
        sim.geometry_center.y + mesh_midpoint.y,
        sim.geometry_center.z + mesh_midpoint.z
    )
    
    # Compute source mask with min_thickness based on grid resolution
    min_thickness = 1.0 / sim.resolution  # Grid spacing
    if sim.sources is not None:
        for src in sim.sources:
            src_center = mp.Vector3(
                src.center.x + translation.x,
                src.center.y + translation.y,
                src.center.z + translation.z
            )
            mask_src = get_box_mask(src_center, src.size, Xc, Yc, Zc, min_thickness=min_thickness)
            source_mask |= mask_src
    # Compute monitor mask with min_thickness based on grid resolution
    if hasattr(sim, 'dft_objects') and sim.dft_objects is not None:
        for mon in sim.dft_objects:
            for reg in mon.regions:
                reg_center = mp.Vector3(
                    reg.center.x + translation.x,
                    reg.center.y + translation.y,
                    reg.center.z + translation.z
                )
                mask_mon = get_box_mask(reg_center, reg.size, Xc, Yc, Zc, min_thickness=min_thickness)
                monitor_mask |= mask_mon

    # Combine masks.
    composite_mask |= source_mask | monitor_mask

    # Overwrite colors: where source_mask is True (and not EPS), set to red.
    composite_facecolors[source_mask & (~eps_mask)] = np.array([1, 0, 0, 1])
    # Where monitor_mask is True (and not EPS), set to blue.
    composite_facecolors[monitor_mask & (~eps_mask)] = np.array([0, 0, 1, 1])
    
    # Plot the composite data.
    fig = plt.figure(figsize=(8,6))
    ax = fig.add_subplot(111, projection='3d')
    X, Y, Z = np.meshgrid(xgrid, ygrid, zgrid, indexing='ij')
    ax.voxels(X, Y, Z, composite_mask, facecolors=composite_facecolors, edgecolor=None, alpha=0.8)
    ax.set_xlabel("X (μm)")
    ax.set_ylabel("Y (μm)")
    ax.set_zlabel("Z (μm)")
    ax.set_xlim(cell_x_min, cell_x_max)
    ax.set_ylim(cell_y_min, cell_y_max)
    ax.set_zlim(cell_z_min, cell_z_max)
    
    if save_to_image:
        plt.savefig(image_name, dpi=150)
        plt.close(fig)
    else:
        plt.show()
# -------------------------------
# Dummy Classes for Testing (with Geometry)
# -------------------------------
class DummyMaterial:
    def __init__(self, index):
        self.index = index
        self.epsilon_diag = [index**2]  # ε = (index)^2

class DummySource:
    def __init__(self, center, size):
        self.center = center
        self.size = size

class DummyMonitorRegion:
    def __init__(self, center, size, direction=0):
        self.center = center
        self.size = size
        self.direction = direction  # not used here

class DummyMonitor:
    def __init__(self, regions):
        self.regions = regions

class DummySimulation:
    def __init__(self, cell_size, resolution, geometry=None):
        self.cell_size = cell_size
        self.resolution = resolution
        self.default_material = DummyMaterial(1.0)
        self.sources = []       # list of DummySource objects
        self.dft_objects = []   # list of DummyMonitor objects
        self.geometry = geometry if geometry is not None else []
        self.geometry_center = mp.Vector3(0, 0, 0)  # default translation
    
    def get_epsilon_grid(self, xgrid, ygrid, zgrid, frequency):
        """
        Compute an ε distribution from the geometry. Background is 1.0.
        For each block in self.geometry, points inside the block are assigned ε = (material.index)^2.
        """
        X, Y, Z = np.meshgrid(xgrid, ygrid, zgrid, indexing='ij')
        eps = np.ones_like(X)  # background permittivity
        for block in self.geometry:
            tx = block.size.x if block.size.x != 0 else 0.05
            ty = block.size.y if block.size.y != 0 else 0.05
            tz = block.size.z if block.size.z != 0 else 0.05
            lower_x = block.center.x - tx/2
            upper_x = block.center.x + tx/2
            lower_y = block.center.y - ty/2
            upper_y = block.center.y + ty/2
            lower_z = block.center.z - tz/2
            upper_z = block.center.z + tz/2
            eps_val = block.material.index**2
            mask = (X >= lower_x) & (X <= upper_x) & \
                   (Y >= lower_y) & (Y <= upper_y) & \
                   (Z >= lower_z) & (Z <= upper_z)
            eps[mask] = eps_val
        return eps

# -------------------------------
# Build the Simulation Cell in 3D
# -------------------------------

# "Extrude" a 2D design by assigning a finite z thickness.
field_profile = True
resolution = 10  # grid points per μm

dpml = 1.0      # PML thickness
dsub = 2.0      # substrate thickness
dpad = 1.0      # flat-surface padding
gp = 1.0        # grating periodicity
gh = 0.5        # grating height
gdc = 0.5       # grating duty cycle
num_cells = 5   # number of grating unit cells
dair = 10 if field_profile else dpad

wvl = 0.5       # center wavelength (μm)
fcen = 1/wvl    # center frequency

# Define a medium (glass) for the grating/substrate.
glass = DummyMaterial(1.5)

# For a 3D simulation, assign a finite z thickness.
sx = dpml + dsub + gh + dair + dpml
sy = dpml + dpad + num_cells*gp + dpad + dpml
sz = 4.0  # cell thickness in μm
cell_size = mp.Vector3(sx, sy, sz)

geometry = []

# ---------------------------
# Define Geometry: Substrate
# ---------------------------
# Offset the substrate in x (+2) to avoid overlapping with monitor voxels.
substrate = mp.Block(material=glass,
                     size=mp.Vector3(dpml+dsub, sy, sz),
                     center=mp.Vector3(-0.5*sx + 0.5*(dpml+dsub) + 2, 0, 0))
geometry.append(substrate)

# ---------------------------
# Define Geometry: Grating Blocks
# ---------------------------
for j in range(num_cells):
    grating = mp.Block(material=glass,
                       size=mp.Vector3(gh, gdc*gp, sz),
                       center=mp.Vector3(-0.5*sx + dpml+dsub+0.5*gh + 2,
                                         -0.5*sy + dpad + dpml + (j+0.5)*gp,
                                         0))
    geometry.append(grating)

# ---------------------------
# Define the Source
# ---------------------------
# Place the source just above the substrate.
src_pt = mp.Vector3(-0.5*sx + dpml, 0, 0)
source = DummySource(center=src_pt, size=mp.Vector3(0, sy, sz))

# ---------------------------
# Define the Monitor/Detector
# ---------------------------
# Place the detector in the air region above the grating.
mon_pt = mp.Vector3(0.5*sx, 0, 0)
monitor_region = DummyMonitorRegion(center=mon_pt, size=mp.Vector3(sx/2, sy-2*dpml, 0))
monitor = DummyMonitor(regions=[monitor_region])

# ---------------------------
# Create the Dummy Simulation Object
# ---------------------------
sim = DummySimulation(cell_size, resolution, geometry=geometry)
sim.sources.append(source)
sim.dft_objects.append(monitor)

# Optionally, set translation offsets:
sim.geometry_center = mp.Vector3(0, 0, 0)
mesh_midpoint = mp.Vector3(0, 0, 0)

# ---------------------------
# Visualize the Composite Data
# ---------------------------
plot3D_composite(sim, cell_size, mesh_midpoint=mesh_midpoint, save_to_image=False,
                 image_name="sim_with_epsilon.png", frequency=fcen)
