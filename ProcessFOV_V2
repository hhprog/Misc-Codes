import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

def plotFOV(config=None):
    """
    Processes and plots a Field of View (FoV) dataset from optical simulations, calculating FWHM and plotting intensity data.
    
    Args:
    config (dict): Configuration parameters including:
        - 'filename' (str): Name of the CSV file to read data from (default: "FoV.csv").
        - 'use_normalized_data' (bool): Whether to normalize intensity data (default: False).
        - 'use_desired_order' (bool): Whether to use a custom order for Run IDs (default: False).
        - 'desired_order' (list): Custom order of Run IDs if 'use_desired_order' is True.
        - 'custom_filename' (str): Custom name for the output file (default: None).

    Returns:
    pd.DataFrame: FWHM results as a DataFrame.
    
    Example usage:
    1. Default settings:
       fwhm_results = plotFOV()

    2. Custom settings:
       custom_config = {
           'filename': 'FoV.csv',
           'use_normalized_data': True,
           'use_desired_order': False,
           'desired_order': ['RunID_1', 'RunID_2'],
           'custom_filename': ''
       }
       fwhm_results = plotFOV(config=custom_config)

    Note:
    If 'filename' does not point to a valid CSV file, a FileNotFoundError will be raised. Ensure the file exists and is correctly named.
    """
    if config is None:
        config = {
            "filename": "FoV.csv",
            "use_normalized_data": False,
            "use_desired_order": False,
            "desired_order": None,
            "custom_filename": None
        }

    # Load the dataset
    if not os.path.isfile(config['filename']):
        raise FileNotFoundError(f"The specified file '{config['filename']}' does not exist.")

    df = pd.read_csv(config['filename'], sep=',')
    FOV_list = df['Type'].unique()
    fwhm_results = []

    date_str = datetime.now().strftime('%y%m%d')

    # Define line styles and color palette
    line_styles = ['-', '--', '-.', ':', (0, (3, 5, 1, 5)), (0, (1, 1)), (0, (5, 10)), (0, (3, 1, 1, 1)), (0, (1, 5))]
    high_contrast_colors = ['black', 'red', 'blue', 'green', 'orange', 'purple', 'cyan', 'magenta', 'brown', 'pink']

    for FOV in FOV_list:
        fov_data = df[df['Type'] == FOV]
        plt.figure(figsize=(10, 5))
        run_ids = fov_data['Run ID'].unique()
        
        ordered_run_ids = run_ids if not config['use_desired_order'] else [run_id for run_id in config['desired_order'] if run_id in run_ids]
    
        for i, rID in enumerate(ordered_run_ids):
            run_data = fov_data[fov_data['Run ID'] == rID]
            angles = run_data['Angle'].values
            intensities = run_data['Intensity'].values
            
            if config['use_normalized_data']:
                max_intensity = np.max(intensities)
                if max_intensity > 0:
                    intensities /= max_intensity
    
            # Calculate FWHM
            fwhm_min_angle, fwhm_max_angle, fwhm_bandwidth, half_max = calculate_fwhm(angles, intensities)
            fwhm_results.append([FOV, rID, fwhm_min_angle, fwhm_max_angle, fwhm_bandwidth])
            
            # Plotting the intensity data for each rID with high contrast lines
            color = high_contrast_colors[i % len(high_contrast_colors)]  # Cycle through colors
            linestyle = line_styles[i % len(line_styles)]  # Cycle through line styles
            plt.plot(angles, intensities, label=f'{rID}', color=color, linestyle=linestyle)
    
            # Draw the half-max line with a label
            plt.axhline(y=half_max, color='grey', linestyle=':', label='__nolegend__')

        # Customize plot
        plt.title(f'{FOV}')
        plt.xlabel('Angle (\u00b0)')
        plt.ylabel('Normalized PS Counts' if config['use_normalized_data'] else 'PS Counts')
        plt.xlim(-90, 90)
        plt.ylim(0)
        plt.xticks(np.arange(-90, 91, 10))
        plt.legend(loc='upper right')  # Position legend in the top right corner
        plt.grid(True)

        # Save figure
        # Save figure
        output_filename = f"{date_str}_{config['custom_filename'] + '_' if config['custom_filename'] else ''}{FOV}.jpg"
        plt.savefig(output_filename)
        plt.close()

    fwhm_df = pd.DataFrame(fwhm_results, columns=["Field of View", "Run ID", "FWHM (Left Bound)", "FWHM (Right Bound)", "FWHM"])
    return fwhm_df

def calculate_fwhm(angle, intensity):
    max_intensity = np.max(intensity)
    half_max = max_intensity / 2
    indices_above_half = np.where(intensity >= half_max)[0]
    
    if len(indices_above_half) > 1:
        left_index = indices_above_half[0]
        right_index = indices_above_half[-1]
        fwhm_min_angle = angle[left_index]
        fwhm_max_angle = angle[right_index]
        fwhm_bandwidth = fwhm_max_angle - fwhm_min_angle
        return fwhm_min_angle, fwhm_max_angle, fwhm_bandwidth, half_max
    return None, None, None, None


