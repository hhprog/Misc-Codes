(define (string-split str)
  (define (split-helper str start)
    (cond
      ((>= start (string-length str)) '())  ; Base case: end of string
      ((char=? (string-ref str start) #\space)  ; If space, split here
       (cons "" (split-helper str (+ start 1))))
      (else
       (let ((word (take-while (lambda (c) (not (char=? c #\space))) 
                               (substring str start))))
         (cons word (split-helper str (+ start (string-length word))))))))
  (split-helper str 0))

(define (read-lines in-port)
  (let ((line (read-string in-port)))  ; Read the next line
    (if (not (eof-object? line))  ; Check if it's not the end of the file
        (cons line (read-lines in-port))  ; Add the line to the list and recurse
        '())))  ; Return an empty list when EOF is reached

(define (read-file file-name)
  (with-input-from-file file-name
    (lambda () (read-lines (current-input-port)))))

;; Usage example:
(define lines (read-file "your-file.txt"))
(display lines)


(define (read-csv file-name)
  ;; Assuming the CSV is simple and rows are separated by newline, columns by commas
  (define (parse-line line)
    (map string->number (string-split line ",")))
  (define (read-lines file)
    (define (read-next-line in-port)
      (let ((line (read-line in-port)))
        (if line
            (cons (parse-line line) (read-next-line in-port))
            '())))
    (with-input-from-file file
      (lambda () (read-next-line (current-input-port)))))
  (read-lines file-name))

(define (group-by-column data column-index)
  (define (group-recursively remaining-data grouped)
    (if (null? remaining-data)
        grouped
        (let* ((group-num (car (car remaining-data)))
               (same-group (take-while (lambda (row) (= group-num (car row))) remaining-data))
               (rest-of-data (drop-while (lambda (row) (= group-num (car row))) remaining-data)))
          (group-recursively rest-of-data (cons same-group grouped)))))
  (group-recursively data '()))

(define (process-group group)
  ;; Define the function that should be applied to each group here
  (display "Processing group: ")
  (display group)
  (newline))

(define (process-csv file-name)
  (define raw-data (read-csv file-name))
  (define grouped-data (group-by-column raw-data 0))
  (for-each process-group grouped-data))

;; Example usage:
(process-csv "data.csv")
