import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Generate sample XYZ ray data
np.random.seed(42)
num_points = 100
x = np.random.rand(num_points) * 10 - 5
y = np.random.rand(num_points) * 10 - 5
z = np.random.rand(num_points) * 10 - 5

# Convert Cartesian coordinates (x, y, z) to spherical coordinates (r, theta, phi)
r = np.sqrt(x**2 + y**2 + z**2)  # Radial distance
theta = np.arctan2(y, x)         # Azimuthal angle (in radians)
phi = np.arccos(z / r)           # Polar angle (in radians)

# Polar plot (2D)
plt.figure(figsize=(8, 8))
ax = plt.subplot(111, projection='polar')
sc = ax.scatter(theta, r, c=phi, cmap='hsv', alpha=0.75)
plt.colorbar(sc, label='Polar Angle (phi)')
ax.set_title("Polar Plot of XYZ Data")
plt.show()

# Spherical plot (3D)
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111, projection='3d')

# Convert spherical coordinates back to Cartesian for plotting
x_sphere = r * np.sin(phi) * np.cos(theta)
y_sphere = r * np.sin(phi) * np.sin(theta)
z_sphere = r * np.cos(phi)

# Plot the 3D spherical data
sc = ax.scatter(x_sphere, y_sphere, z_sphere, c=r, cmap='viridis', alpha=0.75)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.colorbar(sc, label='Radial Distance (r)')
ax.set_title("Spherical Plot of XYZ Data")
plt.show()
